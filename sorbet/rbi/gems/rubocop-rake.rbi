# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: strict
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/rubocop-rake/all/rubocop-rake.rbi
#
# rubocop-rake-0.6.0

module RuboCop
end
module RuboCop::Rake
end
class RuboCop::Rake::Error < StandardError
end
module RuboCop::Rake::Inject
  def self.defaults!; end
end
module RuboCop::Cop
end
module RuboCop::Cop::Rake
end
module RuboCop::Cop::Rake::Helper
end
module RuboCop::Cop::Rake::Helper::ClassDefinition
  def class_definition?(param0 = nil); end
  def in_class_definition?(node); end
  extend RuboCop::AST::NodePattern::Macros
  extend RuboCop::Cop::Rake::Helper::ClassDefinition
end
module RuboCop::Cop::Rake::Helper::OnTask
  def on_send(node); end
  def task?(param0 = nil); end
  extend RuboCop::AST::NodePattern::Macros
end
module RuboCop::Cop::Rake::Helper::TaskDefinition
  def in_task_or_namespace?(node); end
  def task_or_namespace?(param0 = nil); end
  extend RuboCop::AST::NodePattern::Macros
  extend RuboCop::Cop::Rake::Helper::TaskDefinition
end
module RuboCop::Cop::Rake::Helper::TaskName
  def task_name(node); end
  extend RuboCop::Cop::Rake::Helper::TaskName
end
module RuboCop::Cop::Rake::Helper::OnNamespace
  def namespace?(param0 = nil); end
  def on_send(node); end
  extend RuboCop::AST::NodePattern::Macros
end
class RuboCop::Cop::Rake::ClassDefinitionInTask < RuboCop::Cop::Base
  def on_class(node); end
  def on_module(node); end
end
class RuboCop::Cop::Rake::Desc < RuboCop::Cop::Base
  def can_insert_desc_to?(parent); end
  def on_task(node); end
  def parent_and_task(task_node); end
  def prerequisites(param0 = nil); end
  def task_with_desc?(node); end
  extend RuboCop::Cop::AutoCorrector
  include RuboCop::Cop::Rake::Helper::OnTask
end
class RuboCop::Cop::Rake::DuplicateTask < RuboCop::Cop::Base
  def initialize(*arg0); end
  def message_for_dup(previous:, current:, task_name:); end
  def namespaces(node); end
  def on_task(node); end
  def source_location(node); end
  include RuboCop::Cop::Rake::Helper::OnTask
end
class RuboCop::Cop::Rake::DuplicateNamespace < RuboCop::Cop::Base
  def initialize(*arg0); end
  def message_for_dup(previous:, current:, namespace:); end
  def namespaces(node); end
  def on_namespace(node); end
  def source_location(node); end
  include RuboCop::Cop::Rake::Helper::OnNamespace
end
class RuboCop::Cop::Rake::MethodDefinitionInTask < RuboCop::Cop::Base
  def on_def(node); end
  def on_defs(node); end
end
